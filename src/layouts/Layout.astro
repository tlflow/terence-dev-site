---
import "../styles/main.css";
import "../styles/button.css";
import "../styles/button.css";
import "../styles/animation.css";

import SiteFooter from "../partials/SiteFooter.astro";
import SiteMenu from "../components/SiteMenu.astro";

import SVGBrandLogo from "../partials/svgs/brandlogo.astro";
import HeaderPanelMenuBtn from "../components/HeaderPanelMenuBtn.astro";

// import ColorPicker from "../components/ColorPicker.vue";

export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Saira:wght@200..900&family=Inter:wght@200..900&display=swap"
      rel="stylesheet"
    />

    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>

  <!-- <ColorPicker client:load /> -->

  <body id="page-body" data-main-menu="">
    <div class="page-wrapper">
      <div id="top_nav" data-status="">
        <div class="container">
          <div class="top-nav-wrapper">
            <div class="">
              <a class="btn icon home-nav-icon icon-link" href="#">
                <SVGBrandLogo />
              </a>
            </div>
            <HeaderPanelMenuBtn />
          </div>
        </div>
      </div>
      <div class="page-content">
        <slot />
        <SiteFooter />
      </div>
      <SiteMenu />
    </div>
  </body>
</html>

<style>
  .page-wrapper {
    position: relative;
    top: 0;
    width: 100%;
    height: 100%;
  }

  body[data-main-menu="active"] {
    overflow: hidden;
    width: 100vw;
    height: 100vh;
    transition: filter 0.2s ease-in;
    .page-content {
      position: relative;
      filter: blur(4px) brightness(50%);
      transition: filter 0.2s ease-in;
      z-index: 1;
    }
  }

  .home-nav-icon.icon {
    color: var(--color-secondary);
    height: 42px;
    width: 32px;

    @container article (width >= 810px) {
      --icon-size: 3rem;
    }
  }

  .btn {
    display: inline-block;

    &.icon-link {
      border: none;
      padding: 0;
      background-color: transparent;
    }

    &:hover {
      transition: color 0.2s ease-in;
      color: color-mix(in srgb, var(--color-secondary), #fff 25%);
    }
  }

  #top_nav {
    position: fixed;
    top: 0px;
    z-index: 99;
    background-color: var(--color-primary);
    width: 100%;
    box-shadow: rgba(0, 0, 0, 0.6) 2px 6px 10px,
    inset rgba(212, 212, 212, 0.138) 0px -2px 0,
    inset rgba(26, 31, 49, 0.746) 0px -4px 0;
    padding: 20px 0;

    transform: translateY(-100px);
    transition: transform 0.3s ease-in;

    &[data-status="active"] {
      transform: translateY(0px);
      transition: transform 0.2s ease-in-out;
    }
  }
  .top-nav-wrapper {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
</style>

<script>
  import navigation from "../js/handlers/navigation";
  import buildThresholds from "../js/utils/thresholds";

  const $_TOPNAV = document.getElementById("top_nav");

  function showTopNav() {
    $_TOPNAV.dataset.status = "active";
  }
  function hideTopNav() {
    $_TOPNAV.dataset.status = "";
  }

  function isTopNavHidden() {
    return $_TOPNAV.dataset.status !== "active";
  }

  function createObserver() {
    const headerWrapper = document.getElementsByClassName("header-wrapper")[0];

    let scrollPositions;
    scrollPositions = [];

    const options = {
      root: null,
      rootMargin: "0px",
      threshold: buildThresholds(10),
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const headerPosY = entry.boundingClientRect.top;

        scrollPositions.push(headerPosY);

        const lastTwoPositions = scrollPositions.slice(-2);
        const preVal = lastTwoPositions[0];
        const newVal = lastTwoPositions[1];

        if (preVal < newVal) {
          //scrolling up
          if (entry.isIntersecting) {
            hideTopNav();
            scrollPositions = [];
            return;
          }
        } else {
          // scrolling down
          if (entry.intersectionRatio < 0.25 && isTopNavHidden()) {
            showTopNav();
            scrollPositions = [];
            return;
          }
        }
      });
    }, options);
    observer.observe(headerWrapper);
  }

  createObserver();
  navigation();
</script>
